Great! Since you’re using Angular on the frontend and Spring Boot on the backend, here’s a complete working example of how to:
	1.	Connect Spring Boot to Oracle DB.
	2.	Validate UID and password.
	3.	Return response to Angular.
	4.	Route to /home if valid, else show an alert.

⸻

1. Spring Boot - Backend

pom.xml (add Oracle JDBC driver)

<dependency>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>19.3.0.0</version>
</dependency>

application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.hibernate.ddl-auto=none

Entity

@Entity
@Table(name = "devusers")
public class DevUser {
    @Id
    private String uid;
    private String password;

    // Getters and setters
}

Repository

@Repository
public interface DevUserRepository extends JpaRepository<DevUser, String> {
    Optional<DevUser> findByUidAndPassword(String uid, String password);
}

Controller

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:4200") // Allow Angular frontend
public class AuthController {

    @Autowired
    private DevUserRepository repository;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody DevUser user) {
        Optional<DevUser> found = repository.findByUidAndPassword(user.getUid(), user.getPassword());
        if (found.isPresent()) {
            return ResponseEntity.ok("Login successful");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }
    }
}



⸻

2. Angular - Frontend

login.component.ts

uid: string = '';
password: string = '';

constructor(private http: HttpClient, private router: Router) {}

onLogin() {
  this.http.post('http://localhost:8080/api/auth/login', {
    uid: this.uid,
    password: this.password
  }, { responseType: 'text' }).subscribe({
    next: () => this.router.navigateByUrl('home'),
    error: () => alert('Invalid UID or Password')
  });
}

login.component.html

<input type="text" placeholder="UID" [(ngModel)]="uid" class="betterOutline" />
<input type="password" placeholder="Password" [(ngModel)]="password" class="betterOutline" />
<button (click)="onLogin()">Submit</button>



⸻

Let me know if you want to secure passwords using hashing or add a registration page too.
Thanks for sharing all the images. I understand you’re trying to send selected column data from your Angular frontend to a Spring Boot backend using a POST request.

Here’s a corrected and clean version of both the frontend (Angular) and backend (Spring Boot) code to make the data flow work properly.

⸻

✅ Frontend (Angular)

match.component.ts

Fix how filename1 and filename2 are set:

onFileUpload(event: any, fileNumber: number) {
  const file = event.target.files[0];
  const reader = new FileReader();

  reader.onload = (e: any) => {
    const data = new Uint8Array(e.target.result);
    const workbook = XLSX.read(data, { type: 'array' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '' });

    if (fileNumber === 1) {
      this.file1Data = jsonData;
      this.file1Columns = Object.keys(jsonData[0] as Object);
      this.filename1 = file.name;
    } else {
      this.file2Data = jsonData;
      this.file2Columns = Object.keys(jsonData[0] as Object);
      this.filename2 = file.name;
    }
  };

  reader.readAsArrayBuffer(file);
}

compareColumns() method

Make sure the data you’re sending is an object, not just an array:

compareColumns() {
  const payload = {
    selectedCol1: this.selectedCol1,
    selectedCol2: this.selectedCol2
  };

  this.oneToOneService.oneToOne(payload).subscribe({
    next: (res) => {
      console.log("Posted successfully", res);
    },
    error: (e) => {
      console.error("Error occurred", e);
    }
  });
}



⸻

match.service.ts

No changes needed, but just for clarity:

@Injectable({
  providedIn: 'root'
})
export class MatchService {
  private apiUrl = 'http://localhost:8080/api/reconcile';

  constructor(private http: HttpClient) {}

  oneToOne(data: any): Observable<any> {
    return this.http.post(this.apiUrl, data);
  }
}



⸻

✅ Backend (Spring Boot)

You need to:
	1.	Change RequestBody type to a proper DTO.
	2.	Accept JSON data.

Create a DTO class:

package com.example.demo.model;

public class ColumnRequest {
    private String selectedCol1;
    private String selectedCol2;

    // Getters and Setters
    public String getSelectedCol1() {
        return selectedCol1;
    }

    public void setSelectedCol1(String selectedCol1) {
        this.selectedCol1 = selectedCol1;
    }

    public String getSelectedCol2() {
        return selectedCol2;
    }

    public void setSelectedCol2(String selectedCol2) {
        this.selectedCol2 = selectedCol2;
    }
}

Update your Controller:

package com.example.demo.controller;

import com.example.demo.model.ColumnRequest;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class ReconciliationController {

    @PostMapping("/reconcile")
    public String receiveColumnNames(@RequestBody ColumnRequest data) {
        return "Received columns: " + data.getSelectedCol1() + ", " + data.getSelectedCol2();
    }
}



⸻

Test the Flow
	•	Upload two files.
	•	Select columns.
	•	Click compare (calls compareColumns()).
	•	Spring Boot should log and respond with the column names sent from Angular.

Would you like help displaying the result on the Angular UI as well?
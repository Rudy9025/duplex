package com.example.s3upload.controller;

import com.example.s3upload.service.S3Service;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.util.HashMap;
import java.util.Map;

@RestController
@CrossOrigin(origins = "*") // Allow requests from Angular
@RequestMapping("/upload")
public class S3Controller {

    private final S3Service s3Service;

    public S3Controller(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    @PostMapping
    public ResponseEntity<Map<String, String>> upload(@RequestParam("file") MultipartFile file) {
        try {
            String key = s3Service.uploadFile(file);
            String url = s3Service.generatePresignedUrl(key);

            Map<String, String> response = new HashMap<>();
            response.put("message", "Upload successful");
            response.put("url", url);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "Upload failed: " + e.getMessage()));
        }
    }
}





<dependency>
  <groupId>software.amazon.awssdk</groupId>
  <artifactId>s3</artifactId>
  <version>2.20.20</version>
</dependency>


s3.bucket=YOUR_BUCKET_NAME
s3.accessKey=YOUR_ACCESS_KEY
s3.secretKey=YOUR_SECRET_KEY
s3.endpoint=https://s3browser.group.echonet
s3.region=emea





<form (ngSubmit)="uploadFile()">
  <input type="file" (change)="onFileSelected($event)" />
  <button type="submit">Upload</button>
</form>
import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-upload',
  templateUrl: './upload.component.html'
})
export class UploadComponent {
  selectedFile: File | null = null;

  constructor(private http: HttpClient) {}

  onFileSelected(event: any) {
    this.selectedFile = event.target.files[0];
  }

  uploadFile() {
    if (!this.selectedFile) return;

    const formData = new FormData();
    formData.append('file', this.selectedFile);

    this.http.post('http://localhost:8080/upload', formData)
      .subscribe({
        next: response => console.log('Upload successful', response),
        error: error => console.error('Upload failed', error)
      });
  }
}






Thanks for the follow-up ‚Äî your questions are spot on. Let's break it down clearly:

---

## üîç 1. What is this line?

```java
System.getenv("AWS_ACCESS_KEY_ID"), System.getenv("AWS_SECRET_ACCESS_KEY")
```

These are **environment variables**, typically used to avoid hardcoding sensitive credentials (like access keys) in the source code.

But **you don‚Äôt need this** if you're storing keys in `application.properties`, which **you are**.

So you can **replace that line** with your credentials directly injected from Spring config.

---

## ‚úÖ Updated Final Code (No Env Variables)

### `S3Config.java`

```java
@Configuration
public class S3Config {

    @Value("${s3.accessKey}")
    private String accessKey;

    @Value("${s3.secretKey}")
    private String secretKey;

    @Value("${s3.endpoint}")
    private String endpoint;

    @Value("${s3.region}")
    private String region;

    @Bean
    public S3Client s3Client() {
        AwsBasicCredentials awsCreds = AwsBasicCredentials.create(accessKey, secretKey);
        return S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .endpointOverride(URI.create(endpoint))
                .region(Region.of(region))
                .build();
    }

    @Bean
    public S3Presigner s3Presigner() {
        AwsBasicCredentials awsCreds = AwsBasicCredentials.create(accessKey, secretKey);
        return S3Presigner.builder()
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .endpointOverride(URI.create(endpoint))
                .region(Region.of(region))
                .build();
    }
}
```

---

### `S3Service.java`

```java
@Service
public class S3Service {

    @Value("${s3.bucket}")
    private String bucket;

    private final S3Client s3Client;
    private final S3Presigner s3Presigner;

    public S3Service(S3Client s3Client, S3Presigner s3Presigner) {
        this.s3Client = s3Client;
        this.s3Presigner = s3Presigner;
    }

    public String uploadFile(MultipartFile file) {
        String key = "uploads/" + file.getOriginalFilename();

        try {
            PutObjectRequest putRequest = PutObjectRequest.builder()
                    .bucket(bucket)
                    .key(key)
                    .metadata(Map.of("x-amz-storage-class", "BASIC")) // for ECS Gen 2
                    .contentType(file.getContentType())
                    .build();

            s3Client.putObject(putRequest, RequestBody.fromBytes(file.getBytes()));
            return key;
        } catch (IOException e) {
            throw new RuntimeException("Failed to upload file", e);
        }
    }

    public String generatePresignedUrl(String key) {
        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucket)
                .key(key)
                .build();

        GetObjectPresignRequest presignRequest = GetObjectPresignRequest.builder()
                .signatureDuration(Duration.ofDays(2))
                .getObjectRequest(getObjectRequest)
                .build();

        return s3Presigner.presignGetObject(presignRequest).url().toString();
    }
}
```

---

### `application.properties`

```properties
s3.bucket=YOUR_BUCKET_NAME
s3.accessKey=YOUR_ACCESS_KEY
s3.secretKey=YOUR_SECRET_KEY
s3.endpoint=https://s3browser.group.echonet
s3.region=emea
```

---

## ‚úÖ Summary

* ‚ùå You do **not** need `System.getenv(...)`
* ‚úÖ Use `@Value(...)` to inject your access key/secret directly from `application.properties`
* ‚úÖ For ECS Gen2, use `"x-amz-storage-class": "BASIC"` as metadata (optional; depends on ECS config)
* ‚úÖ Pre-signed URL will be valid for 2 days

Would you like me to zip up and give you this full working Spring Boot project?

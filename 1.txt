Thanks for sharing your setup. Based on your existing code and database table (devusers with uid and password), here’s a complete working example of the Spring Boot backend for validating login credentials:

⸻

1. Login.java (Model)

Make sure the uid field is marked as @Id because JPA requires a primary key:

package com.example.demo.model;

import jakarta.persistence.*;

@Entity
@Table(name = "devusers")
public class Login {

    @Id
    @Column
    private String uid;

    @Column
    private String password;

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String toString() {
        return "User{uid='" + uid + "', password='" + password + "'}";
    }
}



⸻

2. LoginRepository.java

Add a custom method to find a user by uid and password:

package com.example.demo.repository;

import com.example.demo.model.Login;
import org.springframework.data.jpa.repository.JpaRepository;

public interface LoginRepository extends JpaRepository<Login, String> {
    Login findByUidAndPassword(String uid, String password);
}



⸻

3. LoginController.java

package com.example.demo.controller;

import com.example.demo.model.Login;
import com.example.demo.repository.LoginRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*") // allow Angular to access the backend
public class LoginController {

    @Autowired
    private LoginRepository loginRepository;

    @PostMapping("/login")
    public String loginUser(@RequestBody Login login) {
        Login found = loginRepository.findByUidAndPassword(login.getUid(), login.getPassword());
        if (found != null) {
            return "success";
        } else {
            return "invalid";
        }
    }
}



⸻

4. Angular Side (Service Example)

Make sure your Angular code posts to the backend like this:

this.http.post('http://localhost:8080/api/login', {
  uid: this.uid,
  password: this.password
}).subscribe((res: any) => {
  if (res === 'success') {
    this.router.navigateByUrl('/home');
  } else {
    alert('Invalid credentials');
  }
});



⸻

Let me know if you want help integrating this with Angular form or error handling.
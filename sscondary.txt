In Oracle, you cannot auto-generate primary key IDs without using a sequence, because unlike databases like MySQL or PostgreSQL, Oracle does not support AUTO_INCREMENT or SERIAL fields.

However, you can simulate auto-generation in two ways:

⸻

1. Using a Sequence (Recommended & Standard)

This is the correct and reliable method, as shown earlier, using:

@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "...")



⸻

2. Manually set the ID in your code

If you do not want to use a sequence, then you must generate and set the ID manually before saving the entity:

User user = new User();
user.setId(1001L); // You must manage uniqueness yourself
user.setName("John");
user.setEmail("john@example.com");
userRepository.save(user);

Drawback: You’ll have to track the latest ID value yourself to avoid conflicts — this is risky and not scalable.

⸻

3. Trigger + Sequence (DB-level solution)

If you want the ID to be generated only at the DB level and not through JPA, you can:
	•	Create a sequence.
	•	Create a BEFORE INSERT trigger on the table to set the ID.

Example:

CREATE OR REPLACE TRIGGER users_before_insert
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
  SELECT user_seq.NEXTVAL INTO :new.id FROM dual;
END;

Then in your entity, remove @GeneratedValue, just:

@Id
private Long id;

But this way, the ID will be set by Oracle itself.

⸻

Summary:

Option	Needs Sequence?	Auto-incrementing	Recommended
@GeneratedValue + @SequenceGenerator	Yes	Yes	Yes
Manual ID setting	No	No	No (unsafe)
DB Trigger + Sequence	Yes	Yes	Yes (if DB-only logic is preferred)

Let me know which way you want to go — I can guide you through setup.
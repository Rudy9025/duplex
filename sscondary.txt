Great! Here’s how you can implement the edit and update functionality in Angular. This approach will allow you to click an “Edit” button that turns the row into editable inputs and changes the button to “Update”.

⸻

1. HTML Template (users.component.html)

Assuming you are looping through users like this:

<tr *ngFor="let user of users">
  <td *ngIf="editId !== user.id">{{ user.name }}</td>
  <td *ngIf="editId === user.id">
    <input [(ngModel)]="editUser.name" />
  </td>

  <td *ngIf="editId !== user.id">{{ user.email }}</td>
  <td *ngIf="editId === user.id">
    <input [(ngModel)]="editUser.email" />
  </td>

  <td>
    <button *ngIf="editId !== user.id" (click)="enableEdit(user)">Edit</button>
    <button *ngIf="editId === user.id" (click)="updateUser(user.id)">Update</button>
  </td>
</tr>



⸻

2. Component Logic (users.component.ts)

editId: number | null = null;
editUser = { name: '', email: '' };

enableEdit(user: any) {
  this.editId = user.id;
  this.editUser = { name: user.name, email: user.email };
}

updateUser(id: number) {
  const updatedData = { ...this.editUser, id };

  this.userService.updateUser(updatedData).subscribe({
    next: () => {
      this.editId = null;
      this.getUsers(); // Refresh the list
    },
    error: (err) => console.error('Update failed', err)
  });
}



⸻

3. Service Method (user.service.ts)

updateUser(user: any): Observable<any> {
  return this.http.put(`${this.apiUrl}/${user.id}`, user);
}



⸻

Let me know if you’re using ReactiveForms instead of ngModel — I’ll adjust accordingly!
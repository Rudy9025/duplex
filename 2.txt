To convert your existing excludeAndTransform() method to handle a POST request and accept dynamic filter values (like selected column, function such as "in", and input box value) from the frontend, follow these steps:

⸻

1. Update the Spring Boot Backend

DTO (Data Transfer Object)

Create a DTO class to receive the payload from Angular:

// File: ExclusionRequest.java
public class ExclusionRequest {
    private String selectedCol;
    private String function;
    private String value;

    // Getters and Setters
    public String getSelectedCol() {
        return selectedCol;
    }
    public void setSelectedCol(String selectedCol) {
        this.selectedCol = selectedCol;
    }

    public String getFunction() {
        return function;
    }
    public void setFunction(String function) {
        this.function = function;
    }

    public String getValue() {
        return value;
    }
    public void setValue(String value) {
        this.value = value;
    }
}


⸻

Update Controller

Update your ReconciliationController.java to accept this POST request:

@PostMapping("/exclude")
public ReconciliationResult exclude(@RequestBody ExclusionRequest request) {
    return reconciliationService.excludeAndTransform(request, algoPath, starPath);
}


⸻

Update Service Method

Modify excludeAndTransform() in ReconciliationService.java to accept the request and apply filtering based on function like "in" (i.e., contains):

public ReconciliationResult excludeAndTransform(ExclusionRequest request, String algoPath, String starPath) {
    try {
        CSVParser starParser = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(new FileReader(starPath));
        List<CSVRecord> starRecords = starParser.getRecords();

        excludedRecords.clear();
        nonExcludedStar.clear();

        for (CSVRecord record : starRecords) {
            String fieldValue = record.get(request.getSelectedCol()).toLowerCase().trim();
            String inputValue = request.getValue().toLowerCase().trim();
            String function = request.getFunction().toLowerCase();

            boolean shouldExclude = false;

            switch (function) {
                case "in":
                    shouldExclude = fieldValue.contains(inputValue);
                    break;
                case "equals":
                    shouldExclude = fieldValue.equals(inputValue);
                    break;
                case "is null":
                    shouldExclude = fieldValue == null || fieldValue.isEmpty();
                    break;
                case "not in":
                    shouldExclude = !fieldValue.contains(inputValue);
                    break;
                // Add more logic as per your functions
            }

            if (shouldExclude) {
                excludedRecords.add(new Record("ExcludedKey", fieldValue, "Excluded by filter"));
            } else {
                nonExcludedStar.add(record);
            }
        }

        return new ReconciliationResult(Collections.emptyList(), Collections.emptyList(), excludedRecords);

    } catch (Exception e) {
        e.printStackTrace();
        return new ReconciliationResult(); // handle errors gracefully
    }
}


⸻

2. Angular Frontend

Payload Sending Example

Update your Angular method that sends data:

ExcludeColumns(data: string) {
  let payload: any = {};

  if (data === 'FO') {
    payload = {
      selectedCol: this.selectedCol1,
      function: this.function1,
      value: this.valueFO,
    };
  } else if (data === 'BO') {
    payload = {
      selectedCol: this.selectedCol2,
      function: this.function2,
      value: this.valueBO,
    };
  }

  this.exclusionService.exclude(payload).subscribe({
    next: (res) => {
      this.excluded = res;
      console.log(this.excluded);
    },
    error: (e) => console.error(e, "Error")
  });
}


⸻

3. Summary
	•	Frontend builds and sends JSON payload with selected column, function ("in" / "equals"), and value.
	•	Backend Controller receives it using @RequestBody and sends it to service.
	•	Service applies logic based on function and filters records accordingly.
	•	Response is sent back and handled on frontend.

⸻

Would you like help extending support for multiple functions like startsWith, endsWith, or regex too?
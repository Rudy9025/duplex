Here is the complete code integrated into your Angular application:

⸻

1. auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:1111/api/login';

  constructor(private http: HttpClient) {}

  login(uid: string, password: string): Observable<boolean> {
    return this.http
      .post<any>(this.apiUrl, { uid, password })
      .pipe(
        map((response) => {
          if (response.status === 'success') {
            sessionStorage.setItem('authToken', 'true'); // Save token in session storage
            return true;
          } else {
            sessionStorage.removeItem('authToken'); // Remove token on failure
            return false;
          }
        }),
        catchError(() => {
          sessionStorage.removeItem('authToken');
          return of(false);
        })
      );
  }

  isAuthenticated(): boolean {
    return sessionStorage.getItem('authToken') === 'true'; // Check session storage
  }

  logout(): void {
    sessionStorage.clear(); // Clear all session storage
    localStorage.clear(); // Clear all local storage
  }
}


⸻

2. auth.guard.ts

import { Injectable } from '@angular/core';
import {
  CanActivate,
  Router,
  ActivatedRouteSnapshot,
  RouterStateSnapshot,
} from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): boolean {
    if (this.authService.isAuthenticated()) {
      return true;
    } else {
      this.router.navigate(['/']);
      return false;
    }
  }
}


⸻

3. login.component.ts

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
})
export class LoginComponent {
  uid = '';
  password = '';

  constructor(private authService: AuthService, private router: Router) {}

  onLogin(): void {
    if (this.uid === '' || this.password === '') {
      this.showError('Fields cannot be empty');
    } else {
      this.authService.login(this.uid, this.password).subscribe((isAuth) => {
        if (isAuth) {
          this.router.navigateByUrl('/home');
        } else {
          this.showError('Invalid Credentials');
        }
      });
    }
  }

  showError(message: string): void {
    console.error(message); // Replace with actual UI error handling
  }
}


⸻

4. login.component.html

<div class="switch">
  <div *ngIf="isLogin" class="Login">
    <div class="title">Login</div>
    <div class="wrapper">
      <input
        type="text"
        placeholder="UID"
        class="betterOutline"
        [(ngModel)]="uid"
      />
      <input
        type="password"
        placeholder="Password"
        class="betterOutline"
        [(ngModel)]="password"
      />
    </div>
    <div class="item">
      <button (click)="onLogin()">Submit</button>
    </div>
  </div>
</div>


⸻

5. app.routes.ts

import { Routes } from '@angular/router';
import { LoginComponent } from '../components/login/login.component';
import { HomeComponent } from '../components/home/home.component';
import { MatchComponent } from '../components/match/match.component';
import { ExclusionRuleComponent } from '../components/exclusion-rule/exclusion-rule.component';
import { DragMatchComponent } from '../components/dragmatch/dragmatch.component';
import { AuthGuard } from './auth.guard';

export const routes: Routes = [
  { path: '', component: LoginComponent },
  {
    path: '',
    component: LayoutComponent,
    children: [
      { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },
      { path: 'match', component: MatchComponent, canActivate: [AuthGuard] },
      {
        path: 'exclude',
        component: ExclusionRuleComponent,
        canActivate: [AuthGuard],
      },
      {
        path: 'dragmatch',
        component: DragMatchComponent,
        canActivate: [AuthGuard],
      },
    ],
  },
];


⸻

6. app.component.ts

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  constructor(private authService: AuthService, private router: Router) {}

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/']); // Redirect to login page
  }
}


⸻

7. app.component.html

<div>
  <button (click)="logout()">Logout</button>
</div>
<router-outlet></router-outlet>


⸻

Summary
	•	AuthService: Manages login, logout, and authentication checks.
	•	AuthGuard: Protects routes by validating the authentication status.
	•	SessionStorage: Used to persist authentication status during the browser session.
	•	Logout: Clears all session and local storage.

Let me know if you’d like further refinements or additional features!
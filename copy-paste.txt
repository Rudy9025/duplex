Here’s a full working Spring Boot example that does the following:
	•	Accepts two CSV files as file uploads via REST API (/compare endpoint).
	•	Accepts the column index to compare from both files.
	•	Compares values in the selected columns row by row.
	•	Returns JSON output with match/mismatch status.

⸻

1. Maven Dependencies (pom.xml)

Add this if not already present:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>



⸻

2. Spring Boot Controller

package com.example.demo.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.*;

@RestController
public class FileCompareController {

    @PostMapping("/compare")
    public ResponseEntity<List<Map<String, Object>>> compareCsvFiles(
            @RequestParam("file1") MultipartFile file1,
            @RequestParam("file2") MultipartFile file2,
            @RequestParam("col1") int col1,
            @RequestParam("col2") int col2
    ) throws IOException {

        List<String[]> file1Data = readCSV(file1);
        List<String[]> file2Data = readCSV(file2);

        List<Map<String, Object>> results = compareColumns(file1Data, file2Data, col1, col2);
        return ResponseEntity.ok(results);
    }

    private List<String[]> readCSV(MultipartFile file) throws IOException {
        List<String[]> rows = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            rows.add(line.split(",", -1));
        }
        return rows;
    }

    private List<Map<String, Object>> compareColumns(List<String[]> data1, List<String[]> data2, int col1, int col2) {
        List<Map<String, Object>> resultTable = new ArrayList<>();
        int maxLen = Math.max(data1.size(), data2.size());

        for (int i = 0; i < maxLen; i++) {
            String val1 = (i < data1.size() && col1 < data1.get(i).length) ? data1.get(i)[col1] : "";
            String val2 = (i < data2.size() && col2 < data2.get(i).length) ? data2.get(i)[col2] : "";

            String status = val1.trim().equalsIgnoreCase(val2.trim()) ? "Matched" : "MisMatched";

            Map<String, Object> rowMap = new HashMap<>();
            rowMap.put("index", i + 1);
            rowMap.put("value1", val1);
            rowMap.put("value2", val2);
            rowMap.put("status", status);
            resultTable.add(rowMap);
        }

        return resultTable;
    }
}



⸻

3. How to Use This

Postman or Curl Example

POST http://localhost:8080/compare
Form-Data Body:
	•	file1: [select your CSV file 1]
	•	file2: [select your CSV file 2]
	•	col1: 1 (or column index you want from file1, starting from 0)
	•	col2: 2 (column index from file2)

⸻

4. Sample Output

[
  {
    "index": 1,
    "value1": "Apple",
    "value2": "apple",
    "status": "Matched"
  },
  {
    "index": 2,
    "value1": "Orange",
    "value2": "Mango",
    "status": "MisMatched"
  }
]



⸻

If you want to compare based on column names instead of index, or return match count/mismatch count, I can add that too.

Want a working ZIP of the project or code for a UI?
Great! Since the PKIX certificate error is resolved, let's build a clean **Spring Boot application** that:

### ‚úÖ Requirements:

* Uploads **Excel files**
* Sends to an **S3-compatible endpoint** (like `https://s3browser.echonet`)
* Uses **AWS SDK v2**
* Has a static **HTML form** frontend under `/resources/static`

---

## üîß 1. `pom.xml` Dependencies

Make sure you include these:

```xml
<dependencies>
    <!-- Spring Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- AWS SDK for S3 -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
        <version>2.25.17</version>
    </dependency>

    <!-- Apache HTTP Client for AWS SDK -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>apache-client</artifactId>
        <version>2.25.17</version>
    </dependency>
</dependencies>
```

---

## üß† 2. `application.properties`

```properties
aws.s3.bucket=your-bucket-name
aws.s3.access-key=your-access-key
aws.s3.secret-key=your-secret-key
aws.s3.region=eu-west-3
aws.s3.endpoint=https://s3browser.echonet
```

---

## üß† 3. `S3Config.java`

```java
@Configuration
public class S3Config {

    @Value("${aws.s3.access-key}")
    private String accessKey;

    @Value("${aws.s3.secret-key}")
    private String secretKey;

    @Value("${aws.s3.region}")
    private String region;

    @Value("${aws.s3.endpoint}")
    private String endpoint;

    @Bean
    public S3Client s3Client() {
        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);

        return S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(credentials))
                .region(Region.of(region))
                .endpointOverride(URI.create(endpoint))
                .httpClientBuilder(ApacheHttpClient.builder())
                .build();
    }
}
```

---

## üß† 4. `S3Service.java`

```java
@Service
public class S3Service {

    @Value("${aws.s3.bucket}")
    private String bucket;

    private final S3Client s3Client;

    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public void uploadFile(String fileName, InputStream inputStream, long contentLength) {
        PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                .bucket(bucket)
                .key(fileName)
                .acl("public-read")
                .build();

        s3Client.putObject(putObjectRequest,
                RequestBody.fromInputStream(inputStream, contentLength));
    }
}
```

---

## üß† 5. `UploadController.java`

```java
@RestController
public class UploadController {

    private final S3Service s3Service;

    public UploadController(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    @PostMapping("/upload")
    public ResponseEntity<String> handleFileUpload(@RequestParam("file") MultipartFile file) {
        try (InputStream is = file.getInputStream()) {
            s3Service.uploadFile(file.getOriginalFilename(), is, file.getSize());
            return ResponseEntity.ok("File uploaded successfully!");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Upload failed: " + e.getMessage());
        }
    }
}
```

---

## üß† 6. Static HTML Form in `src/main/resources/static/index.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Excel File Upload</title>
</head>
<body>
    <h1>Upload Excel File</h1>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xls,.xlsx" required />
        <button type="submit">Upload</button>
    </form>
</body>
</html>
```

---

## ‚ñ∂Ô∏è Run Your App

1. Start the Spring Boot app.
2. Go to `http://localhost:8080/index.html`
3. Upload an `.xls` or `.xlsx` file.
4. It should upload to the configured S3 bucket at your custom endpoint.

---

Let me know if:

* You need to restrict only Excel MIME types.
* You want the file URL returned after upload.
* You‚Äôre using Gradle instead of Maven.

I can provide enhancements or a zipped project if needed.

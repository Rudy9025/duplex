Thanks for the image. Since youâ€™ve got the MongoDB connection details and password, Iâ€™ll show you how to write a complete Spring Boot application that connects to your MongoDB (visible in Compass) and performs a simple operation (e.g., insert or query a document).

â¸»

âœ… 1. Add Dependencies to pom.xml

<dependencies>
    <!-- Spring Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Data MongoDB -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
</dependencies>


â¸»

âœ… 2. application.properties â€“ MongoDB Configuration

Replace the placeholders with your actual credentials:

spring.data.mongodb.uri=mongodb://admin:<PASSWORD>@eurvli125734.xmp.net.intra:20100/?authSource=admin
spring.data.mongodb.database=your-database-name

ðŸ”’ Replace <PASSWORD> with the actual password shown in your password vault (not ******), and your-database-name with your actual database name if known.

â¸»

âœ… 3. Create a Sample Entity

package com.example.demo.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "users")
public class User {
    @Id
    private String id;
    private String name;
    private String email;

    // Constructors
    public User() {}
    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    // Getters and Setters
    public String getId() { return id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}


â¸»

âœ… 4. Create Repository

package com.example.demo.repository;

import com.example.demo.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface UserRepository extends MongoRepository<User, String> {
}


â¸»

âœ… 5. Create Controller to Test Connection

package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @GetMapping
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}


â¸»

âœ… 6. Main Class

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MongoDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(MongoDemoApplication.class, args);
    }
}


â¸»

âœ… Test the API
	1.	Run the application.
	2.	Use Postman or CURL:
	â€¢	POST http://localhost:8080/api/users with body:

{
  "name": "John",
  "email": "john@example.com"
}


	â€¢	GET http://localhost:8080/api/users to see the saved users.

â¸»

Would you like me to generate this project structure as a downloadable zip too?
To add an AuthGuard for your Angular 17 application that blocks navigation unless the user is authenticated, I’ll make the following changes to your code:
	1.	Create an AuthService: This service will handle API calls to check authentication status.
	2.	Create an AuthGuard: This guard will use the AuthService to determine if navigation is allowed.
	3.	Update the Routing Configuration: Apply the AuthGuard to the routes.

Here’s how to implement this:

⸻

1. Create AuthService

File: auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:1111/api/login';

  private isAuthenticated = false;

  constructor(private http: HttpClient) {}

  login(uid: string, password: string): Observable<boolean> {
    return this.http
      .post<any>(this.apiUrl, { uid, password })
      .pipe(
        map((response) => {
          this.isAuthenticated = response.status === 'success';
          return this.isAuthenticated;
        }),
        catchError(() => {
          this.isAuthenticated = false;
          return of(false);
        })
      );
  }

  checkAuthStatus(): boolean {
    return this.isAuthenticated;
  }
}


⸻

2. Create AuthGuard

File: auth.guard.ts

import { Injectable } from '@angular/core';
import {
  CanActivate,
  Router,
  ActivatedRouteSnapshot,
  RouterStateSnapshot,
} from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): boolean {
    if (this.authService.checkAuthStatus()) {
      return true;
    } else {
      this.router.navigate(['/']);
      return false;
    }
  }
}


⸻

3. Update Routing with AuthGuard

File: app.routes.ts

Update the routes to include the AuthGuard:

import { Routes } from '@angular/router';
import { LoginComponent } from '../components/login/login.component';
import { HomeComponent } from '../components/home/home.component';
import { MatchComponent } from '../components/match/match.component';
import { ExclusionRuleComponent } from '../components/exclusion-rule/exclusion-rule.component';
import { DragMatchComponent } from '../components/dragmatch/dragmatch.component';
import { AuthGuard } from './auth.guard';

export const routes: Routes = [
  { path: '', component: LoginComponent },
  {
    path: '',
    component: LayoutComponent,
    children: [
      { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },
      { path: 'match', component: MatchComponent, canActivate: [AuthGuard] },
      {
        path: 'exclude',
        component: ExclusionRuleComponent,
        canActivate: [AuthGuard],
      },
      {
        path: 'dragmatch',
        component: DragMatchComponent,
        canActivate: [AuthGuard],
      },
    ],
  },
];


⸻

4. Update Login Logic

In your onLogin() function, use the AuthService for authentication:

File: login.component.ts

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
})
export class LoginComponent {
  uid = '';
  password = '';

  constructor(private authService: AuthService, private router: Router) {}

  onLogin(): void {
    if (this.uid === '' || this.password === '') {
      this.showError('Fields cannot be empty');
    } else {
      this.authService.login(this.uid, this.password).subscribe((isAuth) => {
        if (isAuth) {
          this.router.navigateByUrl('/home');
        } else {
          this.showError('Invalid Credentials');
        }
      });
    }
  }

  showError(message: string): void {
    console.error(message); // Replace with actual UI error handling
  }
}


⸻

This implementation ensures:
	•	Unauthenticated users: Cannot access any route other than the login page.
	•	Auth check: Login credentials are validated through the API.

Let me know if you need further help!
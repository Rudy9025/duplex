Here's a **clean, modern Spring Boot 3.x setup** for uploading Excel files to a **custom S3-compatible endpoint**, **without using ApacheHttpClient** ‚Äî using only the default Netty HTTP client from AWS SDK v2. This version avoids manual HTTP client configs, reducing complexity and errors.

---

## ‚úÖ Project Overview

* Spring Boot (3.x)
* AWS SDK v2 (S3)
* Static HTML file for upload
* No Apache HTTP client (uses default Netty)

---

## üîß `pom.xml`

```xml
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>s3-upload-netty</artifactId>
  <version>1.0.0</version>
  <properties>
    <java.version>17</java.version>
  </properties>

  <dependencies>
    <!-- Spring Boot Web -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- AWS SDK v2 for S3 -->
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>s3</artifactId>
      <version>2.25.17</version>
    </dependency>

    <!-- Multipart support -->
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.5</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
```

---

## üìÑ `application.properties`

```properties
aws.s3.bucket=FR_DEV_S3_recon_nexgen
aws.s3.access-key=c59778-fr
aws.s3.secret-key=your_secret_access_key
aws.s3.region=eu-west-3
aws.s3.endpoint=https://s3browser.group.echonet
```

---

## ‚öôÔ∏è `S3Config.java`

```java
package com.example.s3upload.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;

import java.net.URI;

@Configuration
public class S3Config {

    @Value("${aws.s3.access-key}")
    private String accessKey;

    @Value("${aws.s3.secret-key}")
    private String secretKey;

    @Value("${aws.s3.region}")
    private String region;

    @Value("${aws.s3.endpoint}")
    private String endpoint;

    @Bean
    public S3Client s3Client() {
        return S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKey, secretKey)))
                .region(Region.of(region))
                .endpointOverride(URI.create(endpoint))
                .build();
    }
}
```

---

## üì¶ `S3Service.java`

```java
package com.example.s3upload.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.InputStream;

@Service
public class S3Service {

    private final S3Client s3Client;

    @Value("${aws.s3.bucket}")
    private String bucket;

    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public void uploadFile(String key, InputStream inputStream, long size) {
        PutObjectRequest request = PutObjectRequest.builder()
                .bucket(bucket)
                .key(key)
                .acl("public-read")
                .build();

        s3Client.putObject(request, RequestBody.fromInputStream(inputStream, size));
    }
}
```

---

## üåê `UploadController.java`

```java
package com.example.s3upload.controller;

import com.example.s3upload.service.S3Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@Controller
public class UploadController {

    @Autowired
    private S3Service s3Service;

    @GetMapping("/")
    public String home() {
        return "upload.html";
    }

    @PostMapping("/upload")
    @ResponseBody
    public String upload(@RequestParam("file") MultipartFile file) throws IOException {
        s3Service.uploadFile(file.getOriginalFilename(), file.getInputStream(), file.getSize());
        return "‚úÖ Upload successful!";
    }
}
```

---

## üßæ `upload.html` in `src/main/resources/static`

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Excel to S3</title>
</head>
<body>
    <h1>Upload Excel File</h1>
    <form method="post" action="/upload" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xls,.xlsx" required />
        <button type="submit">Upload</button>
    </form>
</body>
</html>
```

---

## ‚úÖ Directory Structure

```
src/
  main/
    java/com/example/s3upload/
      config/S3Config.java
      controller/UploadController.java
      service/S3Service.java
    resources/
      static/upload.html
      application.properties
```

---

## üèÅ Run the App

```bash
./mvnw spring-boot:run
```

Then open `http://localhost:8080` and upload an Excel file.

---

Let me know if you'd like a ready-to-run zip or GitHub project.

To implement the functionality you described, here’s the step-by-step approach:

1. Backend Implementation (Spring Boot)
	•	Create a Spring Boot application with a controller to handle file uploads.
	•	Use the spring.datasource.* properties for Oracle database connection.
	•	Process the file to replace spaces in column names with underscores.
	•	Create a new table in Oracle based on the provided name and the processed file.

Dependencies (Add to pom.xml)

<dependencies>
    <!-- Spring Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Oracle Database Driver -->
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>

Properties (in application.properties)

spring.datasource.url=jdbc:oracle:thin:@<hostname>:<port>:<service_name>
spring.datasource.username=<your_username>
spring.datasource.password=<your_password>
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

Controller

@RestController
@RequestMapping("/api/upload")
public class FileUploadController {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<String> uploadFile(
        @RequestParam("file") MultipartFile file,
        @RequestParam("tableName") String tableName
    ) throws IOException {

        // Validate file and table name
        if (file.isEmpty() || tableName.trim().isEmpty()) {
            return ResponseEntity.badRequest().body("File or Table Name is missing.");
        }

        // Read file contents
        String content = new String(file.getBytes());
        String[] lines = content.split("\n");

        // Process column names
        String[] columns = lines[0].split(",");
        List<String> processedColumns = Arrays.stream(columns)
            .map(column -> column.trim().replaceAll("\\s+", "_"))
            .collect(Collectors.toList());

        // Create table in Oracle
        String createTableQuery = buildCreateTableQuery(tableName, processedColumns);
        jdbcTemplate.execute(createTableQuery);

        // Insert data
        String insertDataQuery = buildInsertDataQuery(tableName, processedColumns, lines);
        jdbcTemplate.execute(insertDataQuery);

        return ResponseEntity.ok("File uploaded and data inserted successfully!");
    }

    private String buildCreateTableQuery(String tableName, List<String> columns) {
        String columnsDefinition = columns.stream()
            .map(column -> column + " VARCHAR2(255)")
            .collect(Collectors.joining(", "));
        return "CREATE TABLE " + tableName + " (" + columnsDefinition + ")";
    }

    private String buildInsertDataQuery(String tableName, List<String> columns, String[] lines) {
        String columnNames = String.join(", ", columns);
        StringBuilder values = new StringBuilder();

        for (int i = 1; i < lines.length; i++) {
            String[] rowValues = lines[i].split(",");
            String rowValueString = Arrays.stream(rowValues)
                .map(value -> "'" + value.trim() + "'")
                .collect(Collectors.joining(", "));
            values.append("(").append(rowValueString).append("),");
        }

        values.deleteCharAt(values.length() - 1); // Remove last comma
        return "INSERT INTO " + tableName + " (" + columnNames + ") VALUES " + values;
    }
}

2. Frontend Implementation (upload.html)

Create an upload.html file with a form to upload the file and specify the table name.

<!DOCTYPE html>
<html>
<head>
    <title>File Upload</title>
</head>
<body>
    <form action="/api/upload" method="post" enctype="multipart/form-data">
        <label for="file">Choose file:</label>
        <input type="file" id="file" name="file" required>
        <br><br>
        <label for="tableName">Table Name:</label>
        <input type="text" id="tableName" name="tableName" required>
        <br><br>
        <button type="submit">Upload</button>
    </form>
</body>
</html>

3. Run and Test
	1.	Run your Spring Boot application.
	2.	Access upload.html via a browser.
	3.	Upload a CSV file and provide a table name.
	4.	Verify the table and data in Oracle SQL Developer.

Would you like additional details on a specific part of the implementation?
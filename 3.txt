Based on your provided credentials and custom S3-compatible endpoint (`https://s3browser.group.echonet`), here’s a complete **Spring Boot application** setup to upload Excel files to your S3 bucket without using Apache HTTP client.

---

## ✅ `application.properties`

```properties
aws.s3.bucketName=FR_DEV_S3_recon_nexgen
aws.s3.accessKey=user_fr_dev_s3_recon_nexgen_rw
aws.s3.secretKey=YOUR_SECRET_KEY_HERE
aws.s3.endpoint=https://s3browser.group.echonet
aws.s3.region=eu-west-3
```

---

## ✅ `S3Config.java`

```java
import io.awspring.cloud.s3.S3Template;
import io.awspring.cloud.s3.S3TransferManager;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3AsyncClient;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.S3Presigner;

import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Configuration
public class S3Config {

    @Value("${aws.s3.accessKey}")
    private String accessKey;

    @Value("${aws.s3.secretKey}")
    private String secretKey;

    @Value("${aws.s3.endpoint}")
    private String endpoint;

    @Value("${aws.s3.region}")
    private String region;

    @Bean
    public S3AsyncClient s3AsyncClient() {
        return S3AsyncClient.builder()
                .endpointOverride(URI.create(endpoint))
                .region(Region.of(region))
                .credentialsProvider(StaticCredentialsProvider.create(
                        AwsBasicCredentials.create(accessKey, secretKey)))
                .serviceConfiguration(S3Configuration.builder()
                        .pathStyleAccessEnabled(true)
                        .build())
                .build();
    }

    @Bean
    public S3TransferManager transferManager(S3AsyncClient s3AsyncClient) {
        return S3TransferManager.builder()
                .s3Client(s3AsyncClient)
                .build();
    }

    @Bean
    public S3Template s3Template(S3TransferManager transferManager) {
        return new S3Template(transferManager);
    }
}
```

---

## ✅ `ExcelUploadController.java`

```java
import io.awspring.cloud.s3.S3Template;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/upload")
public class ExcelUploadController {

    private final S3Template s3Template;

    @Value("${aws.s3.bucketName}")
    private String bucketName;

    public ExcelUploadController(S3Template s3Template) {
        this.s3Template = s3Template;
    }

    @PostMapping("/excel")
    public ResponseEntity<String> uploadExcel(@RequestParam("file") MultipartFile file) {
        try {
            String key = file.getOriginalFilename();
            s3Template.upload(bucketName, key, file.getInputStream());
            return ResponseEntity.ok("File uploaded successfully: " + key);
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Failed to upload file: " + e.getMessage());
        }
    }
}
```

---

## ✅ HTML Upload Page (optional)

If you're serving a static frontend:

```html
<!-- resources/static/upload.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Excel Uploader</title>
</head>
<body>
    <h2>Upload Excel File</h2>
    <form action="/upload/excel" method="post" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xlsx,.xls" required />
        <button type="submit">Upload</button>
    </form>
</body>
</html>
```

---

## ✅ Maven Dependencies

In `pom.xml`:

```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
        <groupId>io.awspring.cloud</groupId>
        <artifactId>spring-cloud-aws-s3</artifactId>
        <version>3.0.1</version>
    </dependency>

    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
    </dependency>

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>
```

---

✅ This code is compatible with custom S3 endpoints (like `s3browser.group.echonet`) and handles **Excel file upload via REST or UI**.
Let me know if you want to download or list files as well.

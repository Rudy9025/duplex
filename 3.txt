You’re absolutely right—creating multiple toggle functions becomes repetitive as the number of checkboxes grows. To simplify, you can generalize the toggle logic using a key-based approach.

Refactored Solution (Reusable Function)

1. Component TS

Use a signal-based Record<string, boolean> map:

checkboxStates = signal<Record<string, boolean>>({
  FO: false,
  BO: false,
});

toggleCheckbox(key: string) {
  this.checkboxStates.update(state => ({
    ...state,
    [key]: !state[key],
  }));
}

isChecked(key: string): boolean {
  return this.checkboxStates()[key];
}



⸻

2. Component HTML

Use the same method and signal for both checkboxes:

<main>
  <div class="upload">
    <pre>Exclusion rules</pre>
    <div class="container">
      <mat-checkbox
        [checked]="isChecked('FO')"
        (change)="toggleCheckbox('FO')"
      >
        FO
      </mat-checkbox>
    </div>

    <div class="container">
      <mat-checkbox
        [checked]="isChecked('BO')"
        (change)="toggleCheckbox('BO')"
      >
        BO
      </mat-checkbox>
    </div>
  </div>
</main>



⸻

Now you can easily add more checkboxes without writing new functions.

Would you like this scalable with dynamic rendering (e.g. from an array of keys like ['FO', 'BO', 'CO'])?
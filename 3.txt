Hereâ€™s a complete example of a file upload system using Angular (frontend) and Spring Boot (backend) where the uploaded file (CSV or Excel) can have dynamic columns.

â¸»

ðŸ”§ Requirements

Frontend
	â€¢	Angular 17+
	â€¢	Angular Material (for UI convenience â€“ optional)

Backend
	â€¢	Spring Boot 3+
	â€¢	Apache POI (for Excel parsing)
	â€¢	OpenCSV (for CSV parsing)

â¸»

âœ… 1. Angular Frontend Code (File Upload Form)

âž¤ file-upload.component.html

<h2>Upload CSV or Excel</h2>
<input type="file" (change)="onFileChange($event)" />
<button (click)="upload()" [disabled]="!file">Upload</button>


â¸»

âž¤ file-upload.component.ts

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html'
})
export class FileUploadComponent {
  file: File | null = null;

  constructor(private http: HttpClient) {}

  onFileChange(event: any) {
    this.file = event.target.files[0];
  }

  upload() {
    if (!this.file) return;

    const formData = new FormData();
    formData.append('file', this.file);

    this.http.post<any>('http://localhost:8080/api/upload', formData)
      .subscribe({
        next: response => console.log('Upload successful:', response),
        error: err => console.error('Upload error:', err)
      });
  }
}


â¸»

âž¤ Import HttpClient in Angular

In app.module.ts:

import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [/* your components */],
  imports: [HttpClientModule /* other modules */],
  bootstrap: [/* your bootstrap component */]
})
export class AppModule { }


â¸»

âœ… 2. Spring Boot Backend Code (Dynamic Column Parsing)

âž¤ pom.xml dependencies

<!-- Apache POI for Excel -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>

<!-- OpenCSV for CSV -->
<dependency>
    <groupId>com.opencsv</groupId>
    <artifactId>opencsv</artifactId>
    <version>5.7.1</version>
</dependency>


â¸»

âž¤ FileUploadController.java

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.opencsv.CSVReader;
import java.io.*;
import java.util.*;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:4200") // Change if needed
public class FileUploadController {

    @PostMapping("/upload")
    public ResponseEntity<?> handleFileUpload(@RequestParam("file") MultipartFile file) throws Exception {
        String filename = file.getOriginalFilename();

        List<Map<String, String>> data;

        if (filename != null && filename.endsWith(".csv")) {
            data = parseCSV(file.getInputStream());
        } else {
            data = parseExcel(file.getInputStream());
        }

        // For debugging: print the parsed data
        data.forEach(System.out::println);

        return ResponseEntity.ok(Map.of("rowsParsed", data.size()));
    }

    private List<Map<String, String>> parseCSV(InputStream is) throws Exception {
        List<Map<String, String>> result = new ArrayList<>();
        try (CSVReader reader = new CSVReader(new InputStreamReader(is))) {
            String[] headers = reader.readNext();
            if (headers == null) return result;

            String[] line;
            while ((line = reader.readNext()) != null) {
                Map<String, String> row = new LinkedHashMap<>();
                for (int i = 0; i < headers.length && i < line.length; i++) {
                    row.put(headers[i], line[i]);
                }
                result.add(row);
            }
        }
        return result;
    }

    private List<Map<String, String>> parseExcel(InputStream is) throws Exception {
        List<Map<String, String>> result = new ArrayList<>();
        try (Workbook workbook = new XSSFWorkbook(is)) {
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (!rowIterator.hasNext()) return result;
            Row headerRow = rowIterator.next();

            List<String> headers = new ArrayList<>();
            headerRow.forEach(cell -> headers.add(cell.getStringCellValue()));

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                Map<String, String> rowData = new LinkedHashMap<>();

                for (int i = 0; i < headers.size(); i++) {
                    Cell cell = row.getCell(i);
                    String value = "";
                    if (cell != null) {
                        switch (cell.getCellType()) {
                            case STRING -> value = cell.getStringCellValue();
                            case NUMERIC -> value = String.valueOf(cell.getNumericCellValue());
                            case BOOLEAN -> value = String.valueOf(cell.getBooleanCellValue());
                            default -> value = "";
                        }
                    }
                    rowData.put(headers.get(i), value);
                }

                result.add(rowData);
            }
        }
        return result;
    }
}


â¸»

âž¤ Enable File Uploads

In application.properties:

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB


â¸»

âœ… 3. Run the App

Backend:

./mvnw spring-boot:run

Frontend:

ng serve


â¸»

âœ… Example Upload

You can upload any .csv or .xlsx file with any number of columns. The backend will parse it dynamically and return a basic response. You can expand this to store in a DB, validate columns, etc.

â¸»

Would you like me to extend this with:
	â€¢	Column validation rules?
	â€¢	Database insertion?
	â€¢	Preview parsed file in Angular?

Let me know and I can assist with those next.
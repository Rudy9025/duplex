<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Excel to S3</title>
</head>
<body>
    <h2>Upload Excel File</h2>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xls,.xlsx" required />
        <button type="submit">Upload</button>
    </form>

    <div id="result" style="margin-top:20px;"></div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData();
            const fileField = document.querySelector('input[type="file"]');

            formData.append('file', fileField.files[0]);

            fetch('/upload/excel', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                document.getElementById('result').textContent = result;
            })
            .catch(error => {
                document.getElementById('result').textContent = 'Upload failed: ' + error;
            });
        });
    </script>
</body>
</html>








Thanks â€” since you're using a **custom S3-compatible endpoint** (like MinIO, ECS, or Cleversafe-based services), and **don't want to use Spring Cloud AWS**, the best approach is to use the **AWS SDK for Java v2** directly.

Here's a minimal and clean working setup using **only AWS SDK v2**, no Spring Cloud or Apache HTTP client.

---

## âœ… `application.properties`

```properties
aws.s3.bucketName=FR_DEV_S3_recon_nexgen
aws.s3.accessKey=user_fr_dev_s3_recon_nexgen_rw
aws.s3.secretKey=your_actual_secret_here
aws.s3.endpoint=https://s3browser.group.echonet
aws.s3.region=eu-west-3
```

---

## âœ… Maven Dependencies (`pom.xml`)

```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
    </dependency>
</dependencies>
```

---

## âœ… `S3Config.java` â€” Raw AWS SDK Setup

```java
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.S3Configuration.Builder;

import java.net.URI;

@Configuration
public class S3Config {

    @Value("${aws.s3.accessKey}")
    private String accessKey;

    @Value("${aws.s3.secretKey}")
    private String secretKey;

    @Value("${aws.s3.endpoint}")
    private String endpoint;

    @Value("${aws.s3.region}")
    private String region;

    @Bean
    public S3Client s3Client() {
        return S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(
                        AwsBasicCredentials.create(accessKey, secretKey)))
                .endpointOverride(URI.create(endpoint))
                .region(Region.of(region))
                .serviceConfiguration(S3Configuration.builder()
                        .pathStyleAccessEnabled(true)
                        .build())
                .build();
    }
}
```

---

## âœ… `ExcelUploadController.java`

```java
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.IOException;

@RestController
@RequestMapping("/upload")
public class ExcelUploadController {

    private final S3Client s3Client;

    @Value("${aws.s3.bucketName}")
    private String bucketName;

    public ExcelUploadController(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    @PostMapping("/excel")
    public ResponseEntity<String> uploadExcel(@RequestParam("file") MultipartFile file) {
        try {
            String fileName = file.getOriginalFilename();

            PutObjectRequest putRequest = PutObjectRequest.builder()
                    .bucket(bucketName)
                    .key(fileName)
                    .build();

            s3Client.putObject(putRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));

            return ResponseEntity.ok("Uploaded successfully: " + fileName);
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Error uploading file: " + e.getMessage());
        }
    }
}
```

---

## ðŸ§ª Test with `curl` or Postman:

```bash
curl -X POST http://localhost:8080/upload/excel \
  -F "file=@/path/to/your/file.xlsx"
```

---

## âœ… Key Notes:

* `pathStyleAccessEnabled(true)` is critical for non-AWS endpoints.
* No Spring Cloud or Apache HTTP client.
* This works for custom endpoints like `https://s3browser.group.echonet`.

Let me know if you also want to add download, list, or delete features.

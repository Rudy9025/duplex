Perfect ‚Äî the option you've selected:

> ‚úÖ **Base64-encoded ASCII, single certificate (`*.pem`, `*.crt`)**

...is **exactly the correct format** for importing into Java using `keytool`. No need for OpenSSL.

---

## ‚úÖ What to Do Next (Based on That Certificate)

Let‚Äôs assume you saved it as:

```
production-team.crt
```

---

## üîß Now Run This Command (Windows)

Replace `<YOUR_JDK_PATH>` with your actual JDK folder (e.g., `C:\Program Files\Java\jdk-17`):

```cmd
"<YOUR_JDK_PATH>\bin\keytool.exe" -importcert -trustcacerts -file production-team.crt -alias intranet-cert -keystore "<YOUR_JDK_PATH>\lib\security\cacerts" -storepass changeit
```

### Example:

```cmd
"C:\Program Files\Java\jdk-17\bin\keytool.exe" -importcert -trustcacerts -file C:\Users\you\Downloads\production-team.crt -alias intranet-cert -keystore "C:\Program Files\Java\jdk-17\lib\security\cacerts" -storepass changeit
```

---

### üìù Notes:

* `-alias intranet-cert`: Just a name, can be anything.
* `-storepass changeit`: This is the **default Java truststore password** (unless changed).
* You‚Äôll be prompted with:

  ```
  Trust this certificate? [no]:
  ```

  Type `yes` and press Enter.

---

## üîÑ Restart Spring Boot App

After importing the certificate, **restart** your app ‚Äî the PKIX error should be gone.

---

## ‚õî No Admin Access? Use a Custom Truststore

Let me know if you **cannot write to the JDK truststore** ‚Äî I‚Äôll walk you through using a **local `.jks` truststore** just for your app.

Would you like that instead?











import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.http.apache.ApacheHttpClient;
import software.amazon.awssdk.http.apache.ProxyConfiguration;
import software.amazon.awssdk.http.apache.internal.conn.SdkTlsSocketFactory;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import javax.net.ssl.*;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;

public class S3Util {

    private static final String BUCKET = "FR_DEV_S3_recon_nexgen";
    private static final String ENDPOINT = "https://s3browser.group.echonet";
    private static final String ACCESS_KEY_ID = "c59778-fr";
    private static final String SECRET_ACCESS_KEY = "your_secret_access_key";
    private static final String REGION = "eu-west-3";

    public static void uploadFile(String fileName, InputStream inputStream) throws IOException {

        // üîí Disable SSL certificate validation (DEV ONLY)
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                public void checkServerTrusted(X509Certificate[] certs, String authType) {}
            }
        };

        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustAllCerts, new SecureRandom());

            ApacheHttpClient.Builder httpClientBuilder = ApacheHttpClient.builder()
                    .sslSocketFactory(sslContext.getSocketFactory());

            S3Client client = S3Client.builder()
                    .credentialsProvider(StaticCredentialsProvider.create(
                            AwsBasicCredentials.create(ACCESS_KEY_ID, SECRET_ACCESS_KEY)))
                    .region(Region.of(REGION))
                    .endpointOverride(URI.create(ENDPOINT))
                    .httpClientBuilder(httpClientBuilder)
                    .build();

            PutObjectRequest request = PutObjectRequest.builder()
                    .bucket(BUCKET)
                    .key(fileName)
                    .acl("public-read")
                    .build();

            client.putObject(request, RequestBody.fromInputStream(inputStream, inputStream.available()));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
